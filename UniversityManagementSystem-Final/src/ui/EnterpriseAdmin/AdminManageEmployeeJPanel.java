/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ui.EnterpriseAdmin;

import Business.Employees.Employee;
import Business.Enterprises.Enterprise;
import Business.Organizations.FireDepartmentOrganization;
import Business.Organizations.HospitalOrganization;
import Business.Organizations.MulticulturalOrganization;
import Business.Organizations.Organization;
import Business.Organizations.PoliceOrganization;
import Business.Organizations.RealtorOrganization;
import Business.Organizations.TherapistOrganization;
import Business.Organizations.UniversityOrganization;
import Business.Roles.AcademicCounselorRole;
import Business.Roles.CommunityCulturalAidRole;
import Business.Roles.DoctorRole;
import Business.Roles.FiremanRole;
import Business.Roles.PoliceOfficerRole;
import Business.Roles.RealEstateAgentRole;
import Business.Roles.TherapistRole;
import Business.UserAccount.UserAccount;
import Business.UserAccount.UserAccountDirectory;
import java.awt.CardLayout;
import java.util.ArrayList;
import javax.swing.JPanel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;



/**
 *
 * @author arfinansari
 */
public class AdminManageEmployeeJPanel extends javax.swing.JPanel {
    private Enterprise enterprise;
    private JPanel userProcessContainer;
    
    /**
     * Creates new form AdminManageEmployeeJPanel
     */
    public AdminManageEmployeeJPanel(JPanel userProcessContainer, Enterprise enterprise) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.enterprise = enterprise;
        populateOrganizationComboBox();
        populateTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        lblOrganization = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblManageEmployee = new javax.swing.JTable();
        lblEmployeeName = new javax.swing.JLabel();
        lblUserName = new javax.swing.JLabel();
        lblPassword = new javax.swing.JLabel();
        cbOrganization = new javax.swing.JComboBox<>();
        txtEmployeeName = new javax.swing.JTextField();
        txtUserName = new javax.swing.JTextField();
        txtPassword = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();

        jPanel1.setBackground(new java.awt.Color(204, 255, 204));
        jPanel1.setMinimumSize(new java.awt.Dimension(1050, 1050));

        jButton1.setText("Save");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        lblOrganization.setText("Organization");

        tblManageEmployee.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Organization", "Employee Name", "User Name", "Password"
            }
        ));
        jScrollPane1.setViewportView(tblManageEmployee);

        lblEmployeeName.setText("Employee Name");

        lblUserName.setText("User Name");

        lblPassword.setText("Password");

        cbOrganization.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { " " }));
        cbOrganization.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbOrganizationActionPerformed(evt);
            }
        });

        txtPassword.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPasswordActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Manage Employee");

        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ui/images/icons8-go-back-48.png"))); // NOI18N
        jButton2.setText("Back");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(278, 278, 278)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblOrganization, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblEmployeeName)
                    .addComponent(lblUserName, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(68, 68, 68)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(cbOrganization, 0, 255, Short.MAX_VALUE)
                    .addComponent(txtEmployeeName)
                    .addComponent(txtUserName)
                    .addComponent(txtPassword))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(146, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 758, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(146, 146, 146))
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addComponent(btnUpdate)
                            .addGap(18, 18, 18)
                            .addComponent(btnDelete)
                            .addGap(181, 181, 181))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                            .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(67, 67, 67)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(395, 395, 395))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(46, 46, 46)
                .addComponent(jButton2)
                .addGap(77, 77, 77)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblOrganization)
                    .addComponent(cbOrganization, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblEmployeeName)
                    .addComponent(txtEmployeeName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblUserName)
                    .addComponent(txtUserName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPassword)
                    .addComponent(txtPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 63, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnUpdate)
                    .addComponent(btnDelete))
                .addGap(0, 338, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
      if(cbOrganization.getSelectedItem().toString() != null){
        
        String orgName = cbOrganization.getSelectedItem().toString();
        
        Organization organization = enterprise.getOrgDirectory().findOrg(orgName);
        
        
        UserAccountDirectory useraccountdirectory = organization.getUserAccountDirectory();
        String name = txtEmployeeName.getText();
        String username = txtUserName.getText();
        String password = txtPassword.getText();




        for(Employee employee : organization.getEmployeeDirectory().getEmployeeList()){
            if(employee.getName().equals(name)){
                JOptionPane.showMessageDialog(null, "Employee already exsists, please input another name.");
                return;
            }
        }



       ArrayList<String>usernamecheck = new ArrayList<>();
        for(UserAccount user: organization.getUserAccountDirectory().getUserAccountList())
        {
            usernamecheck.add(user.getUsername());



       }
        if(usernamecheck.contains(username))
        {
            JOptionPane.showMessageDialog(null,"UserName already exists.");
            return;
        }
        if(username.isEmpty()||password.isEmpty())
        {
            JOptionPane.showMessageDialog(null,"Please fill in all fields.");
            return;
        }
        
        



       // System.out.println(role);
        Employee employee = organization.getEmployeeDirectory().createEmployee(name);



       if(enterprise.getOrgDirectory().findOrg(orgName) instanceof RealtorOrganization){
            UserAccount ua = organization.getUserAccountDirectory().createUserAccount(username, password, employee, new RealEstateAgentRole());
        }
        
        else if(enterprise.getOrgDirectory().findOrg(orgName) instanceof FireDepartmentOrganization){
            UserAccount ua = organization.getUserAccountDirectory().createUserAccount(username, password, employee, new FiremanRole());
        }
        
        else if(enterprise.getOrgDirectory().findOrg(orgName) instanceof HospitalOrganization){
            UserAccount ua = organization.getUserAccountDirectory().createUserAccount(username, password, employee, new DoctorRole());
        }
        
        else if(enterprise.getOrgDirectory().findOrg(orgName) instanceof MulticulturalOrganization){
            UserAccount ua = organization.getUserAccountDirectory().createUserAccount(username, password, employee, new CommunityCulturalAidRole());
        }
        
        else if(enterprise.getOrgDirectory().findOrg(orgName) instanceof PoliceOrganization){
            UserAccount ua = organization.getUserAccountDirectory().createUserAccount(username, password, employee, new PoliceOfficerRole());
        }
        
        else if(enterprise.getOrgDirectory().findOrg(orgName) instanceof TherapistOrganization){
            UserAccount ua = organization.getUserAccountDirectory().createUserAccount(username, password, employee, new TherapistRole());
        }
        
        else if(enterprise.getOrgDirectory().findOrg(orgName) instanceof UniversityOrganization){
            UserAccount ua = organization.getUserAccountDirectory().createUserAccount(username, password, employee, new AcademicCounselorRole());
        }
    
        populateTable(organization);
        cbOrganization.setSelectedIndex(0);
        txtEmployeeName.setText("");
        txtUserName.setText("");
        txtPassword.setText("");
        }
                                      
    }//GEN-LAST:event_jButton1ActionPerformed

    private void txtPasswordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPasswordActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPasswordActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void cbOrganizationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbOrganizationActionPerformed
        // TODO add your handling code here:
        if(cbOrganization.getSelectedItem().toString() != null){
        
        String orgName = cbOrganization.getSelectedItem().toString();
        
        Organization organization = enterprise.getOrgDirectory().findOrg(orgName);
        if (organization != null){
            populateTable(organization);
        }
        }
    }//GEN-LAST:event_cbOrganizationActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = tblManageEmployee.getSelectedRow();

      if (selectedRowIndex < 0) {
            JOptionPane.showMessageDialog(this, "Please select a row to update.");
            return;
        }

      else{
           
           if(txtEmployeeName.getText().equals("") || txtUserName.getText().equals("") || txtPassword.getText().equals("")){
               JOptionPane.showMessageDialog(this, "Please fill in all fields.");
            
           }
           
           else{
           
            DefaultTableModel model = (DefaultTableModel) tblManageEmployee.getModel();
            
            String orgName = cbOrganization.getSelectedItem().toString();
        
            Organization organization = enterprise.getOrgDirectory().findOrg(orgName);
            UserAccountDirectory useraccountdirectory = organization.getUserAccountDirectory();
            Employee e = organization.getEmployeeDirectory().findEmployee(model.getValueAt(selectedRowIndex, 1).toString());
            UserAccount ua = useraccountdirectory.findUserAccount(model.getValueAt(selectedRowIndex, 1).toString());



           ua.getEmployee().setName(txtEmployeeName.getText());
            ua.setUsername(txtUserName.getText());
            ua.setPassword(txtPassword.getText());
            
            JOptionPane.showMessageDialog(this, "Employee has been updated.");
        }
      }
        cbOrganization.setName("");
        txtEmployeeName.setText("");
        txtUserName.setText("");
        txtPassword.setText("");
        
        populateTable();
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = tblManageEmployee.getSelectedRow();
        if (selectedRowIndex<0){
            JOptionPane.showMessageDialog(this, "Please select a row to delete");
            return;
        }
        DefaultTableModel model = (DefaultTableModel) tblManageEmployee.getModel();
        Employee selectedEmployee = (Employee) model.getValueAt(selectedRowIndex, 0);

        String orgName = cbOrganization.getSelectedItem().toString();
        
        Organization organization = enterprise.getOrgDirectory().findOrg(orgName);
        organization.getEmployeeDirectory().deleteEmployee(selectedEmployee);

        JOptionPane.showMessageDialog(this, "Employee details deleted");
        populateTable();
    }//GEN-LAST:event_btnDeleteActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JComboBox<String> cbOrganization;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblEmployeeName;
    private javax.swing.JLabel lblOrganization;
    private javax.swing.JLabel lblPassword;
    private javax.swing.JLabel lblUserName;
    private javax.swing.JTable tblManageEmployee;
    private javax.swing.JTextField txtEmployeeName;
    private javax.swing.JTextField txtPassword;
    private javax.swing.JTextField txtUserName;
    // End of variables declaration//GEN-END:variables

private void populateOrganizationComboBox(){
       
       for(Organization organization : this.enterprise.getOrgDirectory().getOrgList()){
           cbOrganization.addItem(organization.getOrgName());
    
    }
    }
    
    private void populateTable(Organization organization) {
            DefaultTableModel model = (DefaultTableModel) tblManageEmployee.getModel();
            model.setRowCount(0);
            
            for(UserAccount userAccount : organization.getUserAccountDirectory().getUserAccountList()){
                Object[] row = new Object[4];
                row[0] = organization.getOrgName();
                row[1] = userAccount.getEmployee().getName();
                row[2] = userAccount.getUsername();
                row[3] = userAccount.getPassword();
                
                model.addRow(row);
                        }    
                        }         
            
        
private void populateTable(){
        DefaultTableModel model = (DefaultTableModel) tblManageEmployee.getModel();
        model.setRowCount(0);


}
}
